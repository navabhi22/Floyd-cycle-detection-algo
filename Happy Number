202. Happy Number
Easy
8K
996
Companies

Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

    Starting with any positive integer, replace the number by the sum of the squares of its digits.
    Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
    Those numbers for which this process ends in 1 are happy.

Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Example 2:

Input: n = 2
Output: false

 

Constraints:

    1 <= n <= 231 - 1

Method-1 floyd cycle detection algo
class Solution {
    public boolean isHappy(int n) {
      int slow=n;
      int fast=nextNum(n);
      while(slow!=fast){
          if(fast==1) return true;
          if(slow==1) return true;
          slow=nextNum(slow);
          fast=nextNum(nextNum(fast));
      }
        if(slow==1) return true;
      return false;

    }
    public int nextNum(int n) {
        int sum=0;
        while(n>0){
            int dig=n%10;
            sum=sum+dig*dig;
            n=n/10;
        }
        return sum;
    }

}

method-2 using extra space and storing number to check if number apeared before.
class Solution {
    public boolean isHappy(int n) {
        ArrayList<Integer> list = new ArrayList<Integer>();
        int sum=n;
        while(sum!=1){
            list.add(sum);
            sum=square(sum);
            if(!isConsist(sum,list)) return false;
        }
        return true;
    }
    public int square(int n) {
        int sum=0;
        while(n>0){
            int dig=n%10;
            sum=sum+dig*dig;
            n=n/10;
        }
        return sum;
    }
    public boolean isConsist(int n, ArrayList<Integer> list) {
        for(int ele : list){
            if(ele==n) return false;
        }
        return true;
    }

}
